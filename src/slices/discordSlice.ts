import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../app/store";
import { getGuildsRequest, getAccessTokenRequest } from "../api/discord";

// TODO: fix ts errors in formdata on responess

export interface DiscordState {
  status: "idle" | "loading" | "failed";
  access_token: string;
  token_type: string;
  user: any;
  guilds: any[];
}

const initialState: DiscordState = {
  access_token: "",
  guilds: [],
  user: null,
  status: "idle",
  token_type: "",
};

interface IgetGuildsRequest {
  access_token: string;
  token_type: string;
}

// typically used to make async requests.
export const authorizeDiscordUser = createAsyncThunk(
  "discord/authorizeDiscordUser",
  async (code: string) => {
    const response = await getAccessTokenRequest(code);
    //@ts-ignore
    const { access_token, token_type } = response.data;
    const guilds = await getGuildsRequest(access_token, token_type);

    return { ...response.data, guilds };
  }
);

export const getGuilds = createAsyncThunk(
  "discord/getGuilds",
  async ({ access_token, token_type }: IgetGuildsRequest) => {
    const response = await getGuildsRequest(access_token, token_type);
    return response.data;
  }
);

export const discordSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authorizeDiscordUser.pending, (state) => {
        state.status = "loading";
      })
      .addCase(authorizeDiscordUser.fulfilled, (state, action) => {
        state.status = "idle";
        //@ts-ignore
        state.access_token = action.payload.access_token;
        //@ts-ignore
        state.token_type = action.payload.token_type;
        //@ts-ignore
        state.guilds = action.payload.guilds;
      });
  },
});

export const {} = discordSlice.actions;

export default discordSlice.reducer;
